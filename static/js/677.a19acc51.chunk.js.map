{"version":3,"file":"static/js/677.a19acc51.chunk.js","mappings":"6RAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,qJ,SCwDjB,EAlDyB,WACvB,IAAME,GAAWC,EAAAA,EAAAA,MAEXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAAS,YAC5BC,MAAOJ,EAAAA,KAAaI,QAAQD,SAAS,YACrCE,SAAUL,EAAAA,KAAaM,IAAI,GAAGC,IAAI,IAAIJ,SAAS,cAgBjD,OACE,SAACT,EAAD,CAAMc,SAAS,KAAf,UACE,SAAC,KAAD,CACEC,cAhBgB,CACpBP,KAAM,GACNE,MAAO,GACPC,SAAU,IAcNK,SAXe,SAACC,EAAQC,GAC5BC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZf,GAASkB,EAAAA,EAAAA,IAASJ,IAClBC,EAAQI,WACT,EAOKC,iBAAkBlB,EAHpB,UAKE,SAAC,KAAD,WACE,UAACmB,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,SAACC,EAAA,EAAD,CAAkBrB,KAAK,OAAOsB,MAAM,iBAEtC,SAACN,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,SAACC,EAAA,EAAD,CAAkBrB,KAAK,QAAQsB,MAAM,aAEvC,SAACN,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,SAACC,EAAA,EAAD,CAAkBrB,KAAK,WAAWsB,MAAM,gBAE1C,SAACN,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,SAACG,EAAA,EAAD,+BAOb,ECnDD,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C,2FCiBD,IAlBsB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAaC,GAAiB,YAC7CC,GAAeC,EAAAA,EAAAA,MAAfD,WAMFE,GAAY,kBACbH,GADa,IAEhBI,WAAW,EACXC,MAAO,UACPC,QAAS,YACTC,QATmB,WACnBN,GACD,IAUD,OAAO,SAAC,KAAD,kBAAYE,GAAZ,aAA2BJ,IACnC,C,iGCED,IAlByB,SAAC,GAA6B,IAA3BxB,EAA0B,EAA1BA,KAASyB,GAAiB,YACpD,GAAsBQ,EAAAA,EAAAA,IAASjC,GAA/B,eAAOkC,EAAP,KAAcC,EAAd,KAEMC,GAAe,0BAChBF,GACAT,GAFgB,IAGnBI,WAAW,EACXE,QAAS,aAQX,OALII,GAAQA,EAAKE,SAAWF,EAAKG,QAC/BF,EAAgBE,OAAQ,EACxBF,EAAgBG,WAAaJ,EAAKG,QAG7B,SAAC,KAAD,UAAeF,GACvB,C","sources":["components/RegistrationForm/RegistrationForm.styled.js","components/RegistrationForm/RegistrationForm.jsx","Pages/Register/Registration.jsx","components/ButtonWrapper/ButtonWrapper.jsx","components/FormTextField/TextFieldWrapper.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Container } from '@mui/material';\n\nexport const Wrap = styled(Container)`\n  padding: 70px;\n  border-radius: 10px;\n  border: 1px solid #d2d4d6;\n  margin-top: 80px;\n  backdrop-filter: blur(15px);\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { Grid } from '@mui/material';\nimport { register } from 'redux/auth/operations';\nimport TextFieldWrapper from 'components/FormTextField/TextFieldWrapper';\nimport ButtonWrapper from 'components/ButtonWrapper/ButtonWrapper';\nimport { Wrap } from './RegistrationForm.styled';\n\nconst RegistrationForm = () => {\n  const dispatch = useDispatch();\n\n  const schema = yup.object().shape({\n    name: yup.string().required('Required'),\n    email: yup.string().email().required('Required'),\n    password: yup.string().min(6).max(15).required('Required'),\n  });\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, actions) => {\n    console.log(values);\n    console.log(actions);\n    dispatch(register(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Wrap maxWidth=\"xs\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <Form>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextFieldWrapper name=\"name\" label=\"Full Name\" />\n            </Grid>\n            <Grid item xs={12}>\n              <TextFieldWrapper name=\"email\" label=\"Email\" />\n            </Grid>\n            <Grid item xs={12}>\n              <TextFieldWrapper name=\"password\" label=\"Password\" />\n            </Grid>\n            <Grid item xs={12}>\n              <ButtonWrapper>Submit</ButtonWrapper>\n            </Grid>\n          </Grid>\n        </Form>\n      </Formik>\n    </Wrap>\n  );\n};\n\nexport default RegistrationForm;\n","import RegistrationForm from 'components/RegistrationForm/RegistrationForm';\n\nconst Registration = () => {\n  return <RegistrationForm />;\n};\n\nexport default Registration;\n","import { Button } from '@mui/material';\nimport { useFormikContext } from 'formik';\n\nconst ButtonWrapper = ({ children, ...otherProps }) => {\n  const { submitForm } = useFormikContext();\n\n  const handleSubmit = () => {\n    submitForm();\n  };\n\n  const configButton = {\n    ...otherProps,\n    fullWidth: true,\n    color: 'primary',\n    variant: 'contained',\n    onClick: handleSubmit,\n  };\n\n  return <Button {...configButton}>{children}</Button>;\n};\n\nexport default ButtonWrapper;\n","import { TextField } from '@mui/material';\nimport { useField } from 'formik';\n\nconst TextFieldWrapper = ({ name, ...otherProps }) => {\n  const [field, meta] = useField(name);\n\n  const configTextField = {\n    ...field,\n    ...otherProps,\n    fullWidth: true,\n    variant: 'outlined',\n  };\n\n  if (meta && meta.touched && meta.error) {\n    configTextField.error = true;\n    configTextField.helperText = meta.error;\n  }\n\n  return <TextField {...configTextField} />;\n};\n\nexport default TextFieldWrapper;\n"],"names":["Wrap","styled","Container","dispatch","useDispatch","schema","yup","shape","name","required","email","password","min","max","maxWidth","initialValues","onSubmit","values","actions","console","log","register","resetForm","validationSchema","Grid","container","spacing","item","xs","TextFieldWrapper","label","ButtonWrapper","children","otherProps","submitForm","useFormikContext","configButton","fullWidth","color","variant","onClick","useField","field","meta","configTextField","touched","error","helperText"],"sourceRoot":""}